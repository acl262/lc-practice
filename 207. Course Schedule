class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (prerequisites == null || prerequisites.length == 0 || prerequisites.length == 1 ) return true;
        
        Map<Integer, List<Integer>> m = new HashMap<>();
        int[] inBound = new int[numCourses];
        List<Integer> tmp = null;
        for(int[] pres : prerequisites) {
            inBound[pres[0]]++;
           tmp = new LinkedList<>();
            if(m.containsKey( pres[1])) {
                tmp = m.get(pres[1]);
                tmp.add(pres[0]);
                 m.put(pres[1], tmp);
                    
            } else {
                tmp.add(pres[0]);
                m.put(pres[1], tmp);
            } 
        }
        
       Queue<Integer> queue =  new LinkedList<>();
        
       for (int i =0; i < inBound.length; ++i) {
            if (inBound[i]==0) {queue.add(i);}
        }
        
       while(!queue.isEmpty()) {
            int cur = queue.poll();
            List<Integer> courseToTake = m.get(cur);
            if(courseToTake != null) {
            for(int course : courseToTake) {
                 inBound[course]--;
                if (inBound[course]==0) {queue.add(course);}
                }
            }
        }
        
       for (int i =0; i < inBound.length; ++i) {
            if (inBound[i]!=0) {return false;}
        }
        
       return true;
        
    }
    
}
