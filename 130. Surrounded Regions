class Solution {
    public void solve(char[][] board) {
        if (board == null || board.length == 0) return;

        int len = board.length, width = board[0].length;

        for (int i = 0; i < len; i++) {
            bfs(i, 0, board);
            bfs(i, width - 1, board);
        }
        
        for (int j = 0; j < width; j++) {
            bfs(0, j, board);
            bfs(len - 1, j, board);
        }
        
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < width; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
                if (board[i][j] == 'A') {
                    board[i][j] = 'O';
                }
            }
        }
    }


    private void bfs(int i, int j, char[][] board) {
        Queue<int[]> q = new LinkedList<>();
        int len = board.length, width = board[0].length;

        q.offer(new int[]{i, j});
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int x = cur[0], y = cur[1];

            if (x < 0 || x > len - 1 || y < 0 || y > width - 1 || board[x][y] != 'O') {
                continue;
            }
            
            board[x][y] = 'A';

            q.offer(new int[]{x - 1, y});
            q.offer(new int[]{x + 1, y});
            q.offer(new int[]{x, y + 1});
            q.offer(new int[]{x, y - 1});
        }
    }

}
